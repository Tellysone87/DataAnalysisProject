# -*- coding: utf-8 -*-
"""clean_data (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L5-3Cfk_S678sxb6nQr_KbvZ3xgpysZG

<h1>Team 16 Data Cleaning assignment</h1>
<p>12/16/2021<br>
    
<strong>Description:</strong> We currently have 2 datasets.The goal of this assignment is to clean our data and get the data ready for manipulation and analysis.</p>
"""

## importing needed packages

import numpy as np
import pandas as pd
import math
import base64
import re

"""<h4> Importing csv</h4>"""

## importing dataset and checking shape

df = pd.read_csv('Data/Team 16 project-dataset.csv')
print(df.shape)
df.sample(12)

df.dtypes

"""<h4> Removing Units from Column Names</h4>"""

## Renamed Columns without the unit information in the parentheses. It gives the columns a neater look.
for column_name in df: 
    ## Set a variable to contain the column names without the units. This removes all text inside of the parentheses.
    column_new_name = re.sub(r'\(.*?\)', '', column_name)
    ## Set the new column names to the dataframe
    df.rename(columns = {column_name : column_new_name}, inplace = True)
    df.rename(columns = {'SPI \nyear' : 'SPI year'}, inplace = True)

"""<h4>Making sure the names are updated</h4>"""

## taking a look at the columns
df.columns = df.columns.str.rstrip()
df.columns = df.columns.str.replace(' ', '_')
df.columns = df.columns.str.lower()

df.columns

"""<h4>Need To Create Unique ID</h4>"""

## Each row needs a unique id. Looks like the spi Country code and
## Spi Year are uniques to combine for unique ID

df['unique_id'] = df['spi_country_code'].map(str) + df['spi_year'].map(str)

df

"""<h4>Making A New Df with specific columns based on Tally</h4>"""

# Creating new dataset from multiple columns from the original dataframe, 
# I am only taking out the columns that were not green on our schema for now.
# We can always update this
needed_variables_df = df[['unique_id','spi_rank', 'country', 'spi_country_code', 'spi_year', 'status',
       'social_progress_index', 'deaths_from_interpersonal_violence','perceived_criminality','media_censorship','access_to_justice','freedom_of_expression','freedom_of_religion','discrimination_and_violence_against_minorities',
       'acceptance_of_gays_and_lesbians']]

##needed_variables_df.sample(12)
needed_variables_df.head(12)

"""<h4>Checking Data Types </h4>"""

## The data types are clean and I do not see any issues. If you run this 
## block it will show our data types. Because the unique id contains string. I decided to change it to string type
df['unique_id'] = df['unique_id'].astype(str)

needed_variables_df.dtypes
needed_variables_df.info()

"""<h4> Dropping Any Duplicates </h4>"""

## Code to drop and data if any is present
needed_variables_df = needed_variables_df.drop_duplicates()

"""<h4> To Export New Dataframe </h4>"""

## Export the cleaned dataset as a csv and excel file. If I have missed anything let me know.
## You will need to install Xlsxwriter
import xlsxwriter
 
## csv file
needed_variables_df.to_csv("Cleaned_Team16_Dataset.csv", index=False, encoding='utf8')

## excel file
needed_variables_df.to_excel("Cleaned_Team16_excel_file.xlsx", index=False)